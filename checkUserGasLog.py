# ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô ‡∏ó‡∏∏‡∏Å Account ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏ô CHAIN ‡πÇ‡∏î‡∏¢‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÄ‡∏ã‡∏ü‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå .csv ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏°‡∏±‡∏î‡∏£‡∏∞‡∏ß‡∏±‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡πá‡∏° ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô

import os
from web3 import Web3
import time
import csv
from concurrent.futures import ThreadPoolExecutor, as_completed
from queue import Queue
import threading
import json
import random


# ‚úÖ RPC 4 ‡∏ï‡∏±‡∏ß (‡πÅ‡∏ï‡πà‡∏•‡∏∞ Worker ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÅ‡∏¢‡∏Å‡∏Å‡∏±‡∏ô)
RPC_URLS = [
    "https://rpc-l1.jbc.xpool.pw",
    "https://rpc2-l1.jbc.xpool.pw",
    "https://rpc-l1.inan.in.th",
    "https://rpc-l1.jibchain.net"
]

NUM_WORKERS = 4  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Worker ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏î‡πâ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
latest_block = 4857320
start_block = 25000
blocks_per_worker = (latest_block - start_block) // NUM_WORKERS
batch_size = 1000
saveLog = 10000
max_retries = 5


progress_lock = threading.Lock()
processed_blocks = 0
total_blocks = latest_block - start_block

wallet_data = {}
wallet_first_block = {}
wallet_transactions = {}
processed_tx_hashes = set()  # ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏ã‡πâ‡∏≥

# ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå logs ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
os.makedirs("logs", exist_ok=True)

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡πÄ‡∏õ‡πá‡∏ô CSV
def save_wallet_logs(wallet_address):
    file_path = f"logs/{wallet_address}.csv"
    is_new_file = not os.path.exists(file_path)

    with open(file_path, "a", newline="") as csvfile:
        writer = csv.writer(csvfile)

        if is_new_file:
            writer.writerow(["BlockNumber", "Gas Price", "Gas Used", "Transaction Fee","Tx Hash"])

        for tx in wallet_transactions.get(wallet_address, []):
            writer.writerow(tx)

    wallet_transactions[wallet_address] = []

def switch_rpc(worker_id):
    """ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô RPC URL ‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠ RPC ‡πÄ‡∏î‡∏¥‡∏°‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ """
    new_rpc = random.choice(RPC_URLS)
    print(f"üîÑ Worker {worker_id} ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô RPC ‡πÑ‡∏õ‡∏ó‡∏µ‡πà {new_rpc}")
    return Web3(Web3.HTTPProvider(new_rpc, request_kwargs={"timeout": 60}))

def log_progress(worker_id, start_block, current_block):
    """ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå log """
    log_data = {"worker": worker_id, "start_block": start_block, "current_block": current_block}
    with open(f"worker_{worker_id}.log", "w") as log_file:
        json.dump(log_data, log_file)

def process_log_worker(worker_id, rpc_url, start, end):
    w3 = Web3(Web3.HTTPProvider(rpc_url, request_kwargs={"timeout": 60}))
    print(f"üöÄ Worker {worker_id} ‡πÉ‡∏ä‡πâ RPC: {rpc_url} | ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Block {start}-{end}")

    local_wallets = {}

    for block_num in range(start, end, -batch_size):  
        retry_count = 0
        while retry_count < max_retries:
            try:
                logs = w3.eth.get_logs({"fromBlock": block_num - (batch_size-1), "toBlock": block_num})
                break  # ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å loop retry
            except Exception as e:
                print(f"‚ùå Worker {worker_id} RPC Error at Block {block_num}: {e}")
                retry_count += 1
                if retry_count < max_retries:
                    w3 = switch_rpc(worker_id)  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô RPC ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
                    time.sleep(3)  # ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡πà‡∏≠‡∏ô retry
                else:
                    print(f"üö® Worker {worker_id} ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏ó‡∏µ‡πà Block {block_num} ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å retry {max_retries} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
                    return  # ‡∏´‡∏¢‡∏∏‡∏î Worker ‡∏ñ‡πâ‡∏≤‡∏ó‡∏î‡∏•‡∏≠‡∏á‡∏ó‡∏∏‡∏Å RPC ‡πÅ‡∏•‡πâ‡∏ß‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ

        print(f"{worker_id} | Processing: {len(logs)} logs from blocks {block_num - (batch_size-1)} to {block_num}")
        start_time = time.time()

        for log in logs:
            try:
                tx_hash = log["transactionHash"].hex()
                if tx_hash in processed_tx_hashes:
                    continue  
                processed_tx_hashes.add(tx_hash)  

                tx = w3.eth.get_transaction(tx_hash)
                receipt = w3.eth.get_transaction_receipt(tx_hash)

                sender = tx["from"].lower()
                gas_used = receipt["gasUsed"]
                gas_price = tx["gasPrice"]
                gas_fee = gas_used * gas_price
                block_number = log["blockNumber"]

                if sender not in wallet_transactions:
                    wallet_transactions[sender] = []
                wallet_transactions[sender].append([
                    block_number, Web3.from_wei(gas_price, "gwei"), gas_used, Web3.from_wei(gas_fee, "ether"), tx_hash
                ])

                if sender not in local_wallets:
                    local_wallets[sender] = {"gas_fee": 0, "first_block": block_number}
                local_wallets[sender]["gas_fee"] += gas_fee
                local_wallets[sender]["first_block"] = min(local_wallets[sender]["first_block"], block_number)

            except Exception:
                pass

        print(f"{worker_id} | Save Log {len(local_wallets)} Wallets Finish Process in {format(time.time()-start_time)} seconds")
        for addr, data in local_wallets.items():
            if addr not in wallet_data:
                wallet_data[addr] = 0
                wallet_first_block[addr] = data["first_block"]
            else:
                wallet_first_block[addr] = min(wallet_first_block[addr], data["first_block"])
            wallet_data[addr] += data["gas_fee"]

        for addr in local_wallets:
            save_wallet_logs(addr)

        log_progress(worker_id, start, block_num)  # üìù ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log

    print(f"‚úÖ Worker {worker_id} ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô (Block {end} - {start})")
# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏° Gas Fee
def save_to_csv():
    csv_filename = "wallet_gas_fee.csv"
    with open(csv_filename, "w", newline="") as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow(["Address", "First Transaction Block", "Spend ETH"])
        for addr, fee in wallet_data.items():
            first_block = wallet_first_block.get(addr, "N/A")
            writer.writerow([addr, first_block, Web3.from_wei(fee, "ether")])
    print(f"üìÇ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå: wallet_gas_fee.csv")

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å Worker
def main():
    start_time = time.time()


    with ThreadPoolExecutor(max_workers=NUM_WORKERS) as executor:
        futures = []
        for i in range(NUM_WORKERS):
            worker_start = latest_block - (i * blocks_per_worker)  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å latest_block
            worker_end = latest_block - ((i + 1) * blocks_per_worker) + 1  # ‡πÑ‡∏õ‡∏ñ‡∏∂‡∏á start_block
            if worker_end < start_block:
                worker_end = start_block  # ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ worker ‡πÑ‡∏õ‡πÄ‡∏Å‡∏¥‡∏ô start_block
            rpc_url = RPC_URLS[i]
            futures.append(executor.submit(process_log_worker, i + 1, rpc_url, worker_start, worker_end))

        for future in as_completed(futures):
            future.result()

    # ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    execution_time = time.time() - start_time
    print(f"latest_block: {latest_block}")
    print(f"\n‚úÖ ‡∏û‡∏ö {len(wallet_data)} ‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°")
    print(f"‚è≥ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ: {execution_time:.2f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")

if __name__ == "__main__":
    main()
