from multiprocessing import Process
from web3 import Web3
from eth_account import Account

contractABI = [
    {
        "constant": True,
        "inputs": [{"name": "_owner", "type": "address"}],
        "name": "balanceOf",
        "outputs": [{"name": "balance", "type": "uint256"}],
        "type": "function"
    },
    {
        "constant": False,
        "inputs": [
            {"name": "_to", "type": "address"},
            {"name": "_value", "type": "uint256"}
        ],
        "name": "transfer",
        "outputs": [{"name": "", "type": "bool"}],
        "type": "function"
    }
]

def send_erc20_tokens(sender_address, sender_private_key, recipient_address, token_contract_address, token_symbol, amount):
    web3 = Web3(Web3.HTTPProvider('http://49.13.16.167:8545'))
    token_contract = web3.eth.contract(address=token_contract_address, abi=contractABI)

    balance = token_contract.functions.balanceOf(sender_address).call()

    if balance >= amount:
        data = token_contract.encodeABI(fn_name='transfer', args=[recipient_address, web3.to_wei(amount,'ether')])

        transaction = { 
            'to': token_contract_address,
            'value': 0,
            'gas': 100000,
            'gasPrice': web3.to_wei('5', 'gwei'),
            'nonce': web3.eth.get_transaction_count(sender_address),
            'chainId': web3.eth.chain_id,
            'data': data,
        }

        signed_txn = web3.eth.account.sign_transaction(transaction, sender_private_key)
        tx_hash = web3.eth.send_raw_transaction(signed_txn.rawTransaction)
        web3.eth.wait_for_transaction_receipt(tx_hash)

        print(f'Successfully sent {amount} {token_symbol} to {recipient_address}.')
    else:
        print(f'Insufficient balance for {token_symbol} tokens.')

def worker(sender_address, sender_private_key, recipient_address, token_contract_address, token_symbol, amount):
    send_erc20_tokens(sender_address, sender_private_key, recipient_address, token_contract_address, token_symbol, amount)

def get_address_from_private_key(private_key):
    w3 = Web3()
    account = w3.eth.account.from_key(private_key)
    return account.address

if __name__ == '__main__':
    TankPrivateKey = 'SenderTank_PrivateKey'  # Tank's PrivateKey for sending tokens
    Recievers = [
                 'Alt_ID',
                 'Alt_ID', 
                 'Alt_ID',
                 ]
    ERC20Contracts = [
        {'address': '0x0E2610730A3c42fd721B289BEe092D9AD1C76890', 'symbol': 'Gear', 'amount': 50},
        {'address': '0x09DcdCFc6C48803681a3422997c679E773656763', 'symbol': 'PZA', 'amount': 500},
        {'address': '0x7004757e595409568Bd728736e1b0c79FDc94e1c', 'symbol': 'BBQ', 'amount': 500}
    ]

    for contract in ERC20Contracts:
        token_contract_address = contract['address']
        token_symbol = contract['symbol']
        amount = contract['amount']

        for recipient_address in Recievers:
            process = Process(target=worker, args=(get_address_from_private_key(TankPrivateKey), TankPrivateKey, recipient_address, token_contract_address, token_symbol, amount))
            process.start()
            process.join()
